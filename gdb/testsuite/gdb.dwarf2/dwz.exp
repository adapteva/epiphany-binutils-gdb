# Copyright 2013-2014 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile main.c dwz.S

if  {[gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile}1.o \
	  object {nodebug}] != ""} {
    return -1
}

# Start GDB and load object file, compute the function length which is
# needed in the Dwarf Assembler below.
clean_restart ${testfile}1.o

set main_length ""
set test "disassemble main"
gdb_test_multiple $test $test {
    -re ".*$hex <\\+($decimal)>:\[^\r\n\]+\r\nEnd of assembler dump\.\r\n$gdb_prompt $" {
	set main_length $expect_out(1,string)
	pass $test
    }
}

if { $main_length == "" } {
    # Bail out here, because we can't do the following tests if
    # $main_length is unknown.
    return -1
}

# Compute the size of the last instruction.

set test "x/2i main+$main_length"
gdb_test_multiple $test $test {
    -re ".*($hex) <main\\+$main_length>:\[^\r\n\]+\r\n\[ \]+($hex).*\.\r\n$gdb_prompt $" {
	set start $expect_out(1,string)
	set end $expect_out(2,string)

	set main_length [expr $main_length + $end - $start]
	pass $test
    }
}

if { $main_length == "" } {
    # Bail out here, because we can't do the following tests if
    # $main_length is unknown.
    return -1
}

gdb_exit

# Create the DWARF.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    declare_labels partial_label int_label int_label2
    global main_length

    extern main

    cu {} {
	partial_label: partial_unit {} {
	    subprogram {
		{name main}
		{low_pc main addr}
		{high_pc "main + $main_length" addr}
	    }
	}
    }

    cu {} {
	compile_unit {{language @DW_LANG_C}} {
	    int_label2: base_type {
		{name int}
		{byte_size 4 sdata}
		{encoding @DW_ATE_signed}
	    }

	    constant {
		{name the_int}
		{type :$int_label2}
		{const_value 99 data1}
	    }

	    constant {
		{name other_int}
		{type :$int_label2}
		{const_value 99 data1}
	    }
	}
    }

    cu {} {
	compile_unit {{language @DW_LANG_C}} {
	    imported_unit {
		{import $partial_label ref_addr}
	    }

	    int_label: base_type {
		{name int}
		{byte_size 4 sdata}
		{encoding @DW_ATE_signed}
	    }

	    constant {
		{name the_int}
		{type :$int_label}
		{const_value 23 data1}
	    }
	}
    }
}

if  {[gdb_compile $asm_file ${binfile}2.o object {nodebug}] != ""} {
    return -1
}

if  {[gdb_compile [list ${binfile}1.o ${binfile}2.o] \
	  "${binfile}" executable {}] != ""} {
    return -1
}

clean_restart ${testfile}

if ![runto_main] {
    return -1
}

gdb_test "p other_int" " = 99"
gdb_test "p the_int" " = 23"
